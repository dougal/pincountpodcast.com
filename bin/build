#!/usr/bin/env ruby

require 'date'
require 'pathname'
require 'fileutils'
require 'ostruct'
require 'json'

require 'liquid'
require 'kramdown'

class Episode < Liquid::Drop
  def initialize(headers, body)
    @body = body

    @number, @title, @subtitle, @date, @guid, @length, @duration =
      headers.values_at(:number, :title, :subtitle, :date, :guid, :audio_file_size, :audio_duration)
  end

  attr_reader :number, :title, :subtitle, :guid, :length, :duration

  def pretty_date
    # Zero-padded day, full month name, year with century.
    @date.strftime("%-d %B %Y")
  end

  def pretty_duration
    hours, minutes, seconds = split_duration

    if hours > 0
      "#{hours}:#{double_digit(minutes)}:#{double_digit(seconds)}"
    else
      "#{minutes}:#{double_digit(seconds)}"
    end
  end

  def double_digit(number)
    "%02d" % number
  end

  def itunes_date
    # Thu, 14 Jul 2016 12:00:00 GMT
    @date.strftime("%a, %-d %b %Y %H:%M:%S %z")
  end

  def rendered_body
    Kramdown::Document.new(@body).to_html
  end

  def to_liquid
    self
  end

  def mp3_path
    "/audio/pincount-podcast-#{number}.mp3"
  end

  def episode_path
    "/episodes/#{number}.html"
  end

  def length_megabytes
    (@length.to_f / 1024**2).ceil
  end

  def duration_seconds
    hours, minutes, seconds = split_duration

    hours * 3600 + minutes * 60 + seconds
  end

  def <=>(other)
    @number.to_i <=> other.number.to_i
  end

  def to_h(config)
    {
      id:             self.guid,
      url:            "#{config.domain}/#{self.episode_path}",
      title:          self.title,
      summary:        self.subtitle,
      content_html:   self.rendered_body,
      date_published: @date.iso8601,
      attachment:     {
        url:                  "#{config.domain}#{self.mp3_path}",
        mime_type:            'audio/mpeg',
        size_in_bytes:        @length.to_i,
        duration_in_seconds:  self.duration_seconds
      }
    }
  end

  private

  def split_duration
    self.duration.split(':').map(&:to_i)
  end
end

def load_episodes(episode_parent_dir)
  # Grab the directories.
  paths = episode_parent_dir.entries.select{|path| path.to_s[/^\d+$/] }

  # Parse the episodes.
  episodes = paths.map{|path| parse_episode(episode_parent_dir.join(path))}

  episodes.sort
end

def parse_episode(path)
  raw = File.read(path.join('shownotes.md'))
  _, raw_headers, raw_body = raw.split(/^---$/)

  headers = parse_headers(raw_headers)
  body    = remove_leading_newlines(raw_body)
  Episode.new(headers, body)
end

def parse_headers(raw)
  headers = {}
  lines = remove_leading_newlines(raw).split("\n")

  lines.each do |line|
    key, value = line.split(/:\s+/)
    headers[key.to_sym] = value
  end

  # Parse the date to a DateTime object.
  headers[:date] = DateTime.parse(headers[:date])

  headers
end

def remove_leading_newlines(str)
  str.sub(/\A\n+/, '')
end

def render_template_in_layout(filename, page_title, context)
  content = render_template(filename, context)
  render_content_in_layout(content, page_title)
end

def render_content_in_layout(content, page_title)
  layout_context = {}
  layout_context[:content]         = content
  layout_context[:head_content]    = render_template("_head.html", page_title: page_title)
  layout_context[:header_content]  = render_template("_header.html")
  layout_context[:footer_content]  = render_template("_footer.html", current_year: Time.now.year)

  render_template("layout.html", layout_context)
end

def render_template(filename, context={})
  template     = Liquid::Template.parse(File.read("templates/#{filename}.liquid"), :error_mode => :strict)

  # Turn any non-string keys into string keys.
  stringified_context = {}
  context.each do |key, value|
    stringified_context[key.to_s] = value
  end

  # Make sure every template has access to config.
  stringified_context['config'] = load_config

  template.render!(stringified_context,  { strict_variables: true })
end

def write_file(filename, content)
  File.open("build/#{filename}", 'w+') do |f|
    f.write content
  end
end

def load_config
  YAML.load(File.read('config/website.yml'))
end

def load_secrets
  YAML.load(File.read('config/secrets.yml'))
end

def render_episodes(episodes)
  # Render each episode and store in a hash with their corresponding episode
  # numbers
  rendered_episodes = episodes.inject({}) { |hash, episode|
    hash[episode] = render_template("episode.html", episode: episode)
    hash
  }

  # Render and write the episodes page.
  content = render_template_in_layout('episodes.html', 'All Episodes', rendered_episodes: rendered_episodes.values)
  write_file('episodes.html', content)

  # Make sure the episodes directory exists.
  FileUtils.mkdir_p('build/episodes')

  # Render each individual episode page.
  rendered_episodes.each do |episode, rendered_episode|
    content = render_content_in_layout(rendered_episode, episode.title)
    write_file("episodes/#{episode.number}.html", content)
  end
end

def render_index(episodes)
  # Render each episode and store in a hash with their corresponding episode
  # numbers
  rendered_episodes = episodes[0,5].inject({}) { |hash, episode|
    hash[episode.number] = render_template("episode.html", episode: episode)
    hash
  }

  # Render and write the episodes page.
  content = render_template_in_layout("index.html", 'Home', rendered_episodes: rendered_episodes.values)

  write_file('index.html', content)
end

def render_rss(episodes)
  content = render_template("rss.xml", episodes: episodes, secrets: load_secrets)

  write_file('rss.xml', content)
end

def render_json_feed(episodes)
  path    = 'feed.json'
  config  = OpenStruct.new(load_config)

  content = {
    version: 'https://jsonfeed.org/version/1',
    title:          config.name,
    description:    config.description,
    author:         { name: config.authors },
    icon:           "#{config.domain}/assets/images/pincount_logo_1400x1400.jpg",
    home_page_url:  config.domain,
    feed_url:       "#{config.domain}/#{path}",
  }

  content[:items] = episodes.map { |e| e.to_h(config) }

  write_file(path, JSON.pretty_generate(content))
end

def render_pages
  directory = Pathname.new('pages')
  paths = directory.entries.select{|path| path.to_s[/\.md$/] }

  paths.each do |path|
    render_page(directory.join(path))
  end
end

def render_page(path)
  basename        = path.basename(path.extname).to_s
  output_filename = "#{basename}.html"

  page_content = Kramdown::Document.new(File.read(path)).to_html
  page_title   = basename.gsub(/[_-]/, ' ').split(' ').map(&:capitalize).join(' ')
  content      = render_template_in_layout('page.html', page_title, content: page_content)

  write_file(output_filename, content)
end

def copy_assets
  FileUtils.rm_rf('build/assets')
  FileUtils.cp_r('assets', 'build/assets')
end

episode_parent_dir = Pathname.new('episodes')
episodes = load_episodes(episode_parent_dir).reverse # Newest first.

render_index(episodes)
render_episodes(episodes)
render_rss(episodes)
render_json_feed(episodes)
render_pages
copy_assets

puts "Finished build."
